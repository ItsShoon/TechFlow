{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nconst useCart = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [cart, setCart] = useState([]);\n  const fetchCartItems = async () => {\n    if (!user) return;\n    try {\n      const response = await fetch('http://localhost:5000/api/cart/get', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userEmail: user.email\n        })\n      });\n      if (response.ok) {\n        const cartData = await response.json();\n        setCart(cartData);\n      } else {\n        console.error('Failed to fetch cart items', response.statusText);\n      }\n    } catch (error) {\n      console.error('Failed to fetch cart items', error);\n    }\n  };\n  useEffect(() => {\n    fetchCartItems();\n  }, [user]);\n  const addToCart = useCallback(async product => {\n    if (!user) return;\n    try {\n      const cartItem = {\n        id: product.id,\n        name: product.name,\n        price: product.price,\n        quantity: 1\n      };\n      const response = await fetch('http://localhost:5000/api/cart', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userEmail: user.email,\n          item: cartItem\n        })\n      });\n      if (response.ok) {\n        fetchCartItems();\n      } else {\n        console.error('Failed to add item to cart', response.statusText);\n      }\n    } catch (error) {\n      console.error('Failed to add item to cart', error);\n    }\n  }, [user, fetchCartItems]);\n  const removeFromCart = useCallback(async productId => {\n    if (!user) return;\n    try {\n      const response = await fetch('http://localhost:5000/api/cart/remove', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userEmail: user.email,\n          itemId: productId\n        })\n      });\n      if (response.ok) {\n        fetchCartItems();\n      } else {\n        console.error('Failed to remove item from cart', response.statusText);\n      }\n    } catch (error) {\n      console.error('Failed to remove item from cart', error);\n    }\n  }, [user, fetchCartItems]);\n  const clearCart = useCallback(async () => {\n    if (!user) return;\n    try {\n      const response = await fetch('http://localhost:5000/api/cart/clear', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userEmail: user.email\n        })\n      });\n      if (response.ok) {\n        fetchCartItems();\n      } else {\n        console.error('Failed to clear cart', response.statusText);\n      }\n    } catch (error) {\n      console.error('Failed to clear cart', error);\n    }\n  }, [user, fetchCartItems]);\n  const getTotalItems = useCallback(() => {\n    return cart.reduce((total, item) => total + item.quantity, 0);\n  }, [cart]);\n  return {\n    cart,\n    addToCart,\n    removeFromCart,\n    clearCart,\n    getTotalItems\n  };\n};\n_s(useCart, \"k/2zIAuMAdWyBW87dDDbW3Tf1/0=\", false, function () {\n  return [useAuth];\n});\nexport default useCart;","map":{"version":3,"names":["useState","useCallback","useEffect","useAuth","useCart","_s","user","cart","setCart","fetchCartItems","response","fetch","method","headers","body","JSON","stringify","userEmail","email","ok","cartData","json","console","error","statusText","addToCart","product","cartItem","id","name","price","quantity","item","removeFromCart","productId","itemId","clearCart","getTotalItems","reduce","total"],"sources":["C:/Projetos/pw_proj/TechFlow/projeto/src/hooks/useCart.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst useCart = () => {\r\n  const { user } = useAuth();\r\n  const [cart, setCart] = useState([]);\r\n\r\n  const fetchCartItems = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/cart/get', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ userEmail: user.email })\r\n      });\r\n      if (response.ok) {\r\n        const cartData = await response.json();\r\n        setCart(cartData);\r\n      } else {\r\n        console.error('Failed to fetch cart items', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch cart items', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCartItems();\r\n  }, [user]);\r\n\r\n  const addToCart = useCallback(async (product) => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const cartItem = { id: product.id, name: product.name, price: product.price, quantity: 1 };\r\n      const response = await fetch('http://localhost:5000/api/cart', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ userEmail: user.email, item: cartItem })\r\n      });\r\n      if (response.ok) {\r\n        fetchCartItems();\r\n      } else {\r\n        console.error('Failed to add item to cart', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to add item to cart', error);\r\n    }\r\n  }, [user, fetchCartItems]);\r\n\r\n  const removeFromCart = useCallback(async (productId) => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/cart/remove', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ userEmail: user.email, itemId: productId })\r\n      });\r\n      if (response.ok) {\r\n        fetchCartItems();\r\n      } else {\r\n        console.error('Failed to remove item from cart', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to remove item from cart', error);\r\n    }\r\n  }, [user, fetchCartItems]);\r\n\r\n  const clearCart = useCallback(async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/cart/clear', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ userEmail: user.email })\r\n      });\r\n      if (response.ok) {\r\n        fetchCartItems();\r\n      } else {\r\n        console.error('Failed to clear cart', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to clear cart', error);\r\n    }\r\n  }, [user, fetchCartItems]);\r\n\r\n  const getTotalItems = useCallback(() => {\r\n    return cart.reduce((total, item) => total + item.quantity, 0);\r\n  }, [cart]);\r\n\r\n  return { cart, addToCart, removeFromCart, clearCart, getTotalItems };\r\n};\r\n\r\nexport default useCart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}